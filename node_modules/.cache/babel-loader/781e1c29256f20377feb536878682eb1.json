{"ast":null,"code":"import _objectSpread from\"/Users/estebandurazo/Desktop/omwcode copy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/estebandurazo/Desktop/omwcode copy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Users/estebandurazo/Desktop/omwcode copy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React,{useState,useEffect}from\"react\";import styled from\"styled-components\";import{Link}from'react-router-dom';var NavLink=styled(Link)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  text-decoration: none;\\n  font-size: 1rem;\\n  margin-left: 47%;\\n  &:hover {\\n  }\\n  &.active {\\n    font-weight: bold;\\n  }\\n\"])));var Morpher=function Morpher(){var _useState=useState({text:\"onemainworld\",words:[\"以太坊\",\"イーサリアム\",\"onemáinworld\",\"이더리움\",\"اتریوم\",\"Αιθέριο\",\"onemeinwourld\",\"إثيريوم\",\"อีเธอเรียม\",\"Эфириум\",\"इथीरियम\",\"ಇಥೀರಿಯಮ್\",\"אתריום\",\"Ξ\",\"ইথেরিয়াম\",\"எதீரியம்\",\"ఇథిరియూమ్\"]}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];// loops over chars to morph a text to another\nvar morpher=function morpher(start,end){// array of chars to randomly morph the text between start and end\nvar chars=[\"a\",\"b\",\"c\",\"d\",\"x\",\"y\",\"z\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"{\",\"}\",\"%\",\"$\",\"?\",\"!\"];// duration of the global morph\nvar duration=3;// speed of the morph for each letter\nvar frameRate=30;// text variables\nvar string=start.split(\"\");var result=end.split(\"\");var slen=string.length;var rlen=result.length;// time variables\nvar present=new Date();var past=present.getTime();var count=0;var spentTime=0;// splitTime  = milliseconds / letters\nvar splitTime=duration*70/Math.max(slen,rlen);function update(){// Update present date and spent time\npresent=new Date();spentTime+=present.getTime()-past;// Random letters\nfor(var i=count;i<Math.max(slen,rlen);i++){var random=Math.floor(Math.random()*(chars.length-1));// Change letter\nstring[i]=chars[random];}// Morph letters from start to end\nif(spentTime>=splitTime){// Update count of letters to morph\ncount+=Math.floor(spentTime/splitTime);// Morphing\nfor(var j=0;j<count;j++){string[j]=result[j]||null;}// Reset spent time\nspentTime=0;}// Update DOM\nsetState(_objectSpread(_objectSpread({},state),{},{text:string.join(\"\")}));// Save present date\npast=present.getTime();// Loop\nif(count<Math.max(slen,rlen)){// Only use a setTimeout if the frameRate is lower than 60FPS\n// Remove the setTimeout if the frameRate is equal to 60FPS\nmorphTimeout=setTimeout(function(){window.requestAnimationFrame(update);},1000/frameRate);}}// Start loop\nupdate();};var morphTimeout=null;useEffect(function(){var counter=0;var morphInterval=setInterval(function(){var start=state.text;var end=state.words[counter];morpher(start,end);if(counter<state.words.length-1){counter++;}else{counter=0;}},3000);return function(){clearInterval(morphInterval);clearTimeout(morphTimeout);};},[]);return/*#__PURE__*/React.createElement(NavLink,{to:\"/products\"},/*#__PURE__*/React.createElement(\"span\",null,state.text));};export default Morpher;","map":{"version":3,"sources":["/Users/estebandurazo/Desktop/omwcode copy/src/components/morpher.js"],"names":["React","useState","useEffect","styled","Link","NavLink","Morpher","text","words","state","setState","morpher","start","end","chars","duration","frameRate","string","split","result","slen","length","rlen","present","Date","past","getTime","count","spentTime","splitTime","Math","max","update","i","random","floor","j","join","morphTimeout","setTimeout","window","requestAnimationFrame","counter","morphInterval","setInterval","clearInterval","clearTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { Link } from 'react-router-dom';\n\nconst NavLink = styled(Link)`\n  text-decoration: none;\n  font-size: 1rem;\n  margin-left: 47%;\n  &:hover {\n  }\n  &.active {\n    font-weight: bold;\n  }\n`\n\nconst Morpher = () => {\n  const [state, setState] = useState({\n    text: \"onemainworld\",\n    words: [\n      \"以太坊\",\n      \"イーサリアム\",\n      \"onemáinworld\",\n      \"이더리움\",\n      \"اتریوم\",\n      \"Αιθέριο\",\n      \"onemeinwourld\",\n      \"إثيريوم\",\n      \"อีเธอเรียม\",\n      \"Эфириум\",\n      \"इथीरियम\",\n      \"ಇಥೀರಿಯಮ್\",\n      \"אתריום\",\n      \"Ξ\",\n      \"ইথেরিয়াম\",\n      \"எதீரியம்\",\n      \"ఇథిరియూమ్\",\n    ],\n  })\n\n  // loops over chars to morph a text to another\n  const morpher = (start, end) => {\n    // array of chars to randomly morph the text between start and end\n    const chars = [\n      \"a\",\n      \"b\",\n      \"c\",\n      \"d\",\n      \"x\",\n      \"y\",\n      \"z\",\n      \"0\",\n      \"1\",\n      \"2\",\n      \"3\",\n      \"4\",\n      \"5\",\n      \"6\",\n      \"7\",\n      \"{\",\n      \"}\",\n      \"%\",\n      \"$\",\n      \"?\",\n      \"!\",\n    ]\n    // duration of the global morph\n    const duration = 3\n    // speed of the morph for each letter\n    const frameRate = 30\n\n    // text variables\n    const string = start.split(\"\")\n    const result = end.split(\"\")\n    const slen = string.length\n    const rlen = result.length\n\n    // time variables\n    let present = new Date()\n    let past = present.getTime()\n    let count = 0\n    let spentTime = 0\n    // splitTime  = milliseconds / letters\n    let splitTime = (duration * 70) / Math.max(slen, rlen)\n\n    function update() {\n      // Update present date and spent time\n      present = new Date()\n      spentTime += present.getTime() - past\n\n      // Random letters\n      for (let i = count; i < Math.max(slen, rlen); i++) {\n        const random = Math.floor(Math.random() * (chars.length - 1))\n        // Change letter\n        string[i] = chars[random]\n      }\n\n      // Morph letters from start to end\n      if (spentTime >= splitTime) {\n        // Update count of letters to morph\n        count += Math.floor(spentTime / splitTime)\n        // Morphing\n        for (let j = 0; j < count; j++) {\n          string[j] = result[j] || null\n        }\n        // Reset spent time\n        spentTime = 0\n      }\n\n      // Update DOM\n      setState({ ...state, text: string.join(\"\") })\n\n      // Save present date\n      past = present.getTime()\n\n      // Loop\n      if (count < Math.max(slen, rlen)) {\n        // Only use a setTimeout if the frameRate is lower than 60FPS\n        // Remove the setTimeout if the frameRate is equal to 60FPS\n        morphTimeout = setTimeout(() => {\n          window.requestAnimationFrame(update)\n        }, 1000 / frameRate)\n      }\n    }\n\n    // Start loop\n    update()\n  }\n\n  let morphTimeout = null\n\n  useEffect(() => {\n    let counter = 0\n\n    const morphInterval = setInterval(() => {\n      const start = state.text\n      const end = state.words[counter]\n\n      morpher(start, end)\n\n      if (counter < state.words.length - 1) {\n        counter++\n      } else {\n        counter = 0\n      }\n    }, 3000)\n\n    return () => {\n      clearInterval(morphInterval)\n      clearTimeout(morphTimeout)\n    }\n  }, [])\n\n  return (\n    <NavLink to=\"/products\">\n      <span>{state.text}</span>\n    </NavLink>\n  )\n}\n\nexport default Morpher"]},"metadata":{},"sourceType":"module"}