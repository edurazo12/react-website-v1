{"ast":null,"code":"var _jsxFileName = \"/Users/estebandurazo/Desktop/priceAnalytica Codebase/src/components/morpher.js\";\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from 'react-router-dom';\nconst NavLink = styled(Link)`\n  text-decoration: none;\n  font-size: 1rem;\n  margin-left: 20rem;\n  &:hover {\n  }\n  &.active {\n    font-weight: bold;\n  }\n`;\n\nconst Morpher = () => {\n  const [state, setState] = useState({\n    text: \"onemainworld\",\n    words: [\"以太坊\", \"イーサリアム\", \"onemáinworld\", \"이더리움\", \"اتریوم\", \"Αιθέριο\", \"onemeinwourld\", \"إثيريوم\", \"อีเธอเรียม\", \"Эфириум\", \"इथीरियम\", \"ಇಥೀರಿಯಮ್\", \"אתריום\", \"Ξ\", \"ইথেরিয়াম\", \"எதீரியம்\", \"ఇథిరియూమ్\"]\n  }); // loops over chars to morph a text to another\n\n  const morpher = (start, end) => {\n    // array of chars to randomly morph the text between start and end\n    const chars = [\"a\", \"b\", \"c\", \"d\", \"x\", \"y\", \"z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"{\", \"}\", \"%\", \"$\", \"?\", \"!\"]; // duration of the global morph\n\n    const duration = 3; // speed of the morph for each letter\n\n    const frameRate = 30; // text variables\n\n    const string = start.split(\"\");\n    const result = end.split(\"\");\n    const slen = string.length;\n    const rlen = result.length; // time variables\n\n    let present = new Date();\n    let past = present.getTime();\n    let count = 0;\n    let spentTime = 0; // splitTime  = milliseconds / letters\n\n    let splitTime = duration * 70 / Math.max(slen, rlen);\n\n    function update() {\n      // Update present date and spent time\n      present = new Date();\n      spentTime += present.getTime() - past; // Random letters\n\n      for (let i = count; i < Math.max(slen, rlen); i++) {\n        const random = Math.floor(Math.random() * (chars.length - 1)); // Change letter\n\n        string[i] = chars[random];\n      } // Morph letters from start to end\n\n\n      if (spentTime >= splitTime) {\n        // Update count of letters to morph\n        count += Math.floor(spentTime / splitTime); // Morphing\n\n        for (let j = 0; j < count; j++) {\n          string[j] = result[j] || null;\n        } // Reset spent time\n\n\n        spentTime = 0;\n      } // Update DOM\n\n\n      setState({ ...state,\n        text: string.join(\"\")\n      }); // Save present date\n\n      past = present.getTime(); // Loop\n\n      if (count < Math.max(slen, rlen)) {\n        // Only use a setTimeout if the frameRate is lower than 60FPS\n        // Remove the setTimeout if the frameRate is equal to 60FPS\n        morphTimeout = setTimeout(() => {\n          window.requestAnimationFrame(update);\n        }, 1000 / frameRate);\n      }\n    } // Start loop\n\n\n    update();\n  };\n\n  let morphTimeout = null;\n  useEffect(() => {\n    let counter = 0;\n    const morphInterval = setInterval(() => {\n      const start = state.text;\n      const end = state.words[counter];\n      morpher(start, end);\n\n      if (counter < state.words.length - 1) {\n        counter++;\n      } else {\n        counter = 0;\n      }\n    }, 3000);\n    return () => {\n      clearInterval(morphInterval);\n      clearTimeout(morphTimeout);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(NavLink, {\n    to: \"/products\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, state.text));\n};\n\nexport default Morpher;","map":{"version":3,"sources":["/Users/estebandurazo/Desktop/priceAnalytica Codebase/src/components/morpher.js"],"names":["React","useState","useEffect","styled","Link","NavLink","Morpher","state","setState","text","words","morpher","start","end","chars","duration","frameRate","string","split","result","slen","length","rlen","present","Date","past","getTime","count","spentTime","splitTime","Math","max","update","i","random","floor","j","join","morphTimeout","setTimeout","window","requestAnimationFrame","counter","morphInterval","setInterval","clearInterval","clearTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { Link } from 'react-router-dom';\n\nconst NavLink = styled(Link)`\n  text-decoration: none;\n  font-size: 1rem;\n  margin-left: 20rem;\n  &:hover {\n  }\n  &.active {\n    font-weight: bold;\n  }\n`\n\nconst Morpher = () => {\n  const [state, setState] = useState({\n    text: \"onemainworld\",\n    words: [\n      \"以太坊\",\n      \"イーサリアム\",\n      \"onemáinworld\",\n      \"이더리움\",\n      \"اتریوم\",\n      \"Αιθέριο\",\n      \"onemeinwourld\",\n      \"إثيريوم\",\n      \"อีเธอเรียม\",\n      \"Эфириум\",\n      \"इथीरियम\",\n      \"ಇಥೀರಿಯಮ್\",\n      \"אתריום\",\n      \"Ξ\",\n      \"ইথেরিয়াম\",\n      \"எதீரியம்\",\n      \"ఇథిరియూమ్\",\n    ],\n  })\n\n  // loops over chars to morph a text to another\n  const morpher = (start, end) => {\n    // array of chars to randomly morph the text between start and end\n    const chars = [\n      \"a\",\n      \"b\",\n      \"c\",\n      \"d\",\n      \"x\",\n      \"y\",\n      \"z\",\n      \"0\",\n      \"1\",\n      \"2\",\n      \"3\",\n      \"4\",\n      \"5\",\n      \"6\",\n      \"7\",\n      \"{\",\n      \"}\",\n      \"%\",\n      \"$\",\n      \"?\",\n      \"!\",\n    ]\n    // duration of the global morph\n    const duration = 3\n    // speed of the morph for each letter\n    const frameRate = 30\n\n    // text variables\n    const string = start.split(\"\")\n    const result = end.split(\"\")\n    const slen = string.length\n    const rlen = result.length\n\n    // time variables\n    let present = new Date()\n    let past = present.getTime()\n    let count = 0\n    let spentTime = 0\n    // splitTime  = milliseconds / letters\n    let splitTime = (duration * 70) / Math.max(slen, rlen)\n\n    function update() {\n      // Update present date and spent time\n      present = new Date()\n      spentTime += present.getTime() - past\n\n      // Random letters\n      for (let i = count; i < Math.max(slen, rlen); i++) {\n        const random = Math.floor(Math.random() * (chars.length - 1))\n        // Change letter\n        string[i] = chars[random]\n      }\n\n      // Morph letters from start to end\n      if (spentTime >= splitTime) {\n        // Update count of letters to morph\n        count += Math.floor(spentTime / splitTime)\n        // Morphing\n        for (let j = 0; j < count; j++) {\n          string[j] = result[j] || null\n        }\n        // Reset spent time\n        spentTime = 0\n      }\n\n      // Update DOM\n      setState({ ...state, text: string.join(\"\") })\n\n      // Save present date\n      past = present.getTime()\n\n      // Loop\n      if (count < Math.max(slen, rlen)) {\n        // Only use a setTimeout if the frameRate is lower than 60FPS\n        // Remove the setTimeout if the frameRate is equal to 60FPS\n        morphTimeout = setTimeout(() => {\n          window.requestAnimationFrame(update)\n        }, 1000 / frameRate)\n      }\n    }\n\n    // Start loop\n    update()\n  }\n\n  let morphTimeout = null\n\n  useEffect(() => {\n    let counter = 0\n\n    const morphInterval = setInterval(() => {\n      const start = state.text\n      const end = state.words[counter]\n\n      morpher(start, end)\n\n      if (counter < state.words.length - 1) {\n        counter++\n      } else {\n        counter = 0\n      }\n    }, 3000)\n\n    return () => {\n      clearInterval(morphInterval)\n      clearTimeout(morphTimeout)\n    }\n  }, [])\n\n  return (\n    <NavLink to=\"/products\">\n      <span>{state.text}</span>\n    </NavLink>\n  )\n}\n\nexport default Morpher"]},"metadata":{},"sourceType":"module"}